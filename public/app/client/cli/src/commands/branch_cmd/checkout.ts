import os from "os";
import fs from "fs";
import path from "path";
import { exit } from "../../lib/process";
import { Argv } from "yargs";
import { dispatch, initCore } from "../../lib/core";
import { BaseArgs } from "../../types";
import {
  authz,
  getEnvironmentName,
  graphTypes,
  getEnvironmentsByEnvParentId,
} from "@core/lib/graph";
import { Api, Model, Client } from "@core/types";
import chalk from "chalk";
import * as R from "ramda";
import { logAndExitIfActionFailed } from "../../lib/args";
import { findEnvironment } from "../../lib/envs";
import { getPrompt } from "../../lib/console_io";
import { tryApplyDetectedAppOverride } from "../../app_detection";

export const command = "checkout [branch]";
export const desc = "Switch to a different local development branch.";
export const builder = (yargs: Argv<BaseArgs>) =>
  yargs.positional("branch", {
    type: "string",
    describe:
      "branch name (use development, dev, or main for the base development branch)",
    coerce: R.toLower,
  });
export const handler = async (
  argv: BaseArgs & { branch?: string }
): Promise<void> => {
  const prompt = getPrompt();
  let { state, auth } = await initCore(argv, true);

  if (tryApplyDetectedAppOverride(auth.userId, argv)) {
    return handler(argv);
  }

  if (!argv["detectedApp"] || !argv["detectedApp"].dotenvkeyFile) {
    return exit(
      1,
      chalk.red.bold(
        "This command can only be run in an envkey-enabled directory with a .envkey file (in the current directory or a parent directory). You can use `envkey init` to generate a .envkey file."
      )
    );
  }

  let environment: Model.Environment | undefined;

  const envParentEnvironments =
    getEnvironmentsByEnvParentId(state.graph)[argv["detectedApp"].appId] ?? [];

  const developmentRole = graphTypes(state.graph).environmentRoles.find(
    (role) => role.isDefault && role.defaultName == "Development"
  )!;

  const developmentEnvironment = envParentEnvironments.find(
    (env) => !env.isSub && env.environmentRoleId == developmentRole.id
  )!;

  if (argv["branch"]) {
    environment = findEnvironment(
      state.graph,
      argv["detectedApp"].appId,
      argv["branch"] == "development" ||
        argv["branch"] == "main" ||
        argv["branch"] == "dev" ||
        argv["branch"] ==
          getEnvironmentName(
            state.graph,
            developmentEnvironment.id
          ).toLowerCase()
        ? developmentEnvironment.id
        : argv["branch"]
    );
  }

  if (!environment) {
    const branchChoices = [
      developmentEnvironment,
      ...envParentEnvironments.filter(
        (env) =>
          env.isSub && env.parentEnvironmentId == developmentEnvironment.id
      ),
    ].map((env) => ({
      name: env.id,
      message: getEnvironmentName(state.graph, env.id),
    }));

    const branchId = (
      await prompt<{ id: string }>({
        type: "autocomplete",
        name: "id",
        message: "Select a branch:",
        initial: 0,
        choices: branchChoices,
      })
    ).id;

    environment = state.graph[branchId] as Model.Environment;
  }

  if (argv["detectedApp"].environmentId == environment.id) {
    console.log(
      `Branch ${getEnvironmentName(
        state.graph,
        environment.id
      )} is already checked out.`
    );
    return exit();
  }

  // check permissions
  if (argv["detectedApp"].localKeyId) {
    if (
      !authz.canDeleteLocalKey(
        state.graph,
        auth.userId,
        argv["detectedApp"].localKeyId
      )
    ) {
      return exit(
        1,
        chalk.red.bold(
          "You don't have permission to delete the current local key, which is required to switch branches"
        )
      );
    }
  }

  if (!authz.canCreateLocalKey(state.graph, auth.userId, environment.id)) {
    return exit(
      1,
      chalk.red(
        "You aren't allowed to create a local key for the app and environment. Can't switch branches."
      )
    );
  }

  // delete local key for current branch
  if (argv["detectedApp"].localKeyId) {
    const res = await dispatch({
      type: Api.ActionType.DELETE_LOCAL_KEY,
      payload: {
        id: argv["detectedApp"].localKeyId,
      },
    });

    await logAndExitIfActionFailed(
      res,
      "Deleting the current local key failed. Can't switch branches."
    );

    state = res.state;
  }

  // generate new key for target branch
  const res = await dispatch({
    type: Client.ActionType.CREATE_LOCAL_KEY,
    payload: {
      name: os.hostname(),
      appId: argv["detectedApp"].appId,
      environmentId: environment.id,
      autoGenerated: true,
    },
  });

  await logAndExitIfActionFailed(
    res,
    "Auto-generating a new local key failed. Can't switch branches."
  );
  state = res.state;

  const newGeneratedEnvkey = graphTypes(state.graph).generatedEnvkeys.find(
    R.propEq("createdAt", state.graphUpdatedAt)
  );
  if (!newGeneratedEnvkey) {
    return exit(1, chalk.bold("Error fetching new local key."));
  }

  const { envkeyIdPart, encryptionKey } =
    state.generatedEnvkeys[newGeneratedEnvkey.keyableParentId];
  let fullKey = [
    envkeyIdPart,
    encryptionKey,
    auth.hostType == "self-hosted" ? auth.hostUrl : undefined,
  ]
    .filter(Boolean)
    .join("-");

  // dev mode host
  if (process.env.NODE_ENV == "development") {
    fullKey += "-localdev-cloud.envkey.com:2999";
  }

  const appsDir = path.join(os.homedir(), ".envkey", "apps");
  const appPath = path.join(appsDir, argv["detectedApp"].appId + ".env");

  try {
    process.umask(0);
    await fs.promises.mkdir(appsDir, { recursive: true, mode: "0700" });
    await fs.promises.writeFile(appPath, `ENVKEY=${fullKey}`, {
      mode: "0600",
    });
  } catch (err) {
    return exit(
      1,
      chalk.bold(
        `Error writing auto-generated local key to ${appPath}: ${err.toString()}`
      )
    );
  }

  console.log(
    `Checked out branch ${getEnvironmentName(state.graph, environment.id)}.`
  );

  // need to manually exit process since yargs doesn't properly wait for async handlers
  return exit();
};
